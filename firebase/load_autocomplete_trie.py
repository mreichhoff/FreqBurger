import argparse
import json
import concurrent.futures

import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore


def load_trie(trie_file):
    with open(trie_file) as f:
        return json.load(f)


def load_document(collection, key, document):
    collection.document(key).set(document, merge=True)
    print(key)


def get_docs(key, trie, docs):
    if len(trie) == 0:
        return
    for letter, value in trie.items():
        if letter == 'words':
            # firebase doesn't like top-level arrays, for reasons
            docs[key] = {'words': value}
            continue
        get_docs(key+letter, value, docs)


def main():
    parser = argparse.ArgumentParser(
        description='Load collocations into an existing set of word documents')
    parser.add_argument(
        '--base-language', help='a lowercase language name, like chinese or english')
    parser.add_argument(
        '--target-language', help='a lowercase language name, like chinese or english')
    parser.add_argument(
        '--credential-path', help='path to firestore credentials with the appropriate permissions')
    parser.add_argument(
        '--trie-file', help='a path to the trie generated by build_autocomplete_trie')

    args = parser.parse_args()
    args = parser.parse_args()
    collection_id = f"{args.target_language}-{args.base_language}-trie"

    cred = credentials.Certificate(args.credential_path)
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    collection = db.collection(collection_id)
    trie = load_trie(args.trie_file)

    docs = {}
    # make it zero indexed, I guess?
    get_docs('', trie, docs)
    # index = 0
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        for key, doc in docs.items():
            if '/' in key:
                continue
            executor.submit(load_document, collection, key, doc)
            # index = index+1
            # if index > 10:
            #     break


if __name__ == '__main__':
    main()
